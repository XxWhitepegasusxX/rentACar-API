// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  created_at  DateTime @default(now())
  Car         Car[]
}

model Specification {
  id          String   @id @default(uuid())
  name        String   @unique
  description String
  created_at  DateTime @default(now())

  cars_id Specification_cars[]
}

model Users {
  id             String    @id @default(uuid())
  name           String
  password       String
  email          String    @unique
  driver_license String
  isAdmin        Boolean   @default(false)
  created_at     DateTime  @default(now())
  avatar         String?
  Rentals        Rentals[]
}

model Car {
  id            String       @id @default(uuid())
  name          String
  description   String
  daily_rate    Float
  available     Boolean      @default(true)
  license_plate String       @unique
  fine_amount   Float
  brand         String
  category_id   String
  created_at    DateTime     @default(now())
  images        Car_images[]

  specifications_id Specification_cars[]

  category Category  @relation(fields: [category_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  Rentals  Rentals[]

  @@map("Cars")
}

model Specification_cars {
  car_id String
  car    Car    @relation(fields: [car_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id], onDelete: SetNull, onUpdate: Cascade)

  created_at DateTime @default(now())

  @@id([car_id, specification_id])
}

model Car_images {
  id         String   @id @default(uuid())
  car_id     String
  image_name String
  created_at DateTime @default(now())

  car Car @relation(fields: [car_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}

model Rentals {
  id                   String   @id @default(uuid())
  car_id               String
  user_id              String
  start_date           DateTime @default(now())
  end_date             DateTime
  expected_return_date DateTime
  total                Float
  created_at           DateTime @default(now())
  updated_at           DateTime

  car  Car   @relation(fields: [car_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
  user Users @relation(fields: [user_id], references: [id], onDelete: SetNull, onUpdate: Cascade)
}
